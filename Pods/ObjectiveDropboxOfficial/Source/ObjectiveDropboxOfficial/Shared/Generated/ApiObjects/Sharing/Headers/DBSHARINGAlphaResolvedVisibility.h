///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBSerializableProtocol.h"

@class DBSHARINGAlphaResolvedVisibility;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - API Object

///
/// The `AlphaResolvedVisibility` union.
///
/// check documentation for ResolvedVisibility.
///
/// This class implements the `DBSerializable` protocol (serialize and
/// deserialize instance methods), which is required for all Obj-C SDK API route
/// objects.
///
@interface DBSHARINGAlphaResolvedVisibility : NSObject <DBSerializable, NSCopying>

#pragma mark - Instance fields

/// The `DBSHARINGAlphaResolvedVisibilityTag` enum type represents the possible
/// tag states with which the `DBSHARINGAlphaResolvedVisibility` union can
/// exist.
typedef NS_CLOSED_ENUM(NSInteger, DBSHARINGAlphaResolvedVisibilityTag){
    /// Anyone who has received the link can access it. No login required.
    DBSHARINGAlphaResolvedVisibilityPublic,

    /// Only members of the same team can access the link. Login is required.
    DBSHARINGAlphaResolvedVisibilityTeamOnly,

    /// A link-specific password is required to access the link. Login is not
    /// required.
    DBSHARINGAlphaResolvedVisibilityPassword,

    /// Only members of the same team who have the link-specific password can
    /// access the link. Login is required.
    DBSHARINGAlphaResolvedVisibilityTeamAndPassword,

    /// Only members of the shared folder containing the linked file can access
    /// the link. Login is required.
    DBSHARINGAlphaResolvedVisibilitySharedFolderOnly,

    /// The link merely points the user to the content, and does not grant any
    /// additional rights. Existing members of the content who use this link can
    /// only access the content with their pre-existing access rights. Either on
    /// the file directly, or inherited from a parent folder.
    DBSHARINGAlphaResolvedVisibilityNoOne,

    /// Only the current user can view this link.
    DBSHARINGAlphaResolvedVisibilityOnlyYou,

    /// (no description).
    DBSHARINGAlphaResolvedVisibilityOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBSHARINGAlphaResolvedVisibilityTag tag;

#pragma mark - Constructors

///
/// Initializes union class with tag state of "public".
///
/// Description of the "public" tag state: Anyone who has received the link can
/// access it. No login required.
///
/// @return An initialized instance.
///
- (instancetype)initWithPublic;

///
/// Initializes union class with tag state of "team_only".
///
/// Description of the "team_only" tag state: Only members of the same team can
/// access the link. Login is required.
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamOnly;

///
/// Initializes union class with tag state of "password".
///
/// Description of the "password" tag state: A link-specific password is
/// required to access the link. Login is not required.
///
/// @return An initialized instance.
///
- (instancetype)initWithPassword;

///
/// Initializes union class with tag state of "team_and_password".
///
/// Description of the "team_and_password" tag state: Only members of the same
/// team who have the link-specific password can access the link. Login is
/// required.
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamAndPassword;

///
/// Initializes union class with tag state of "shared_folder_only".
///
/// Description of the "shared_folder_only" tag state: Only members of the
/// shared folder containing the linked file can access the link. Login is
/// required.
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolderOnly;

///
/// Initializes union class with tag state of "no_one".
///
/// Description of the "no_one" tag state: The link merely points the user to
/// the content, and does not grant any additional rights. Existing members of
/// the content who use this link can only access the content with their
/// pre-existing access rights. Either on the file directly, or inherited from a
/// parent folder.
///
/// @return An initialized instance.
///
- (instancetype)initWithNoOne;

///
/// Initializes union class with tag state of "only_you".
///
/// Description of the "only_you" tag state: Only the current user can view this
/// link.
///
/// @return An initialized instance.
///
- (instancetype)initWithOnlyYou;

///
/// Initializes union class with tag state of "other".
///
/// @return An initialized instance.
///
- (instancetype)initWithOther;

- (instancetype)init NS_UNAVAILABLE;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value "public".
///
/// @return Whether the union's current tag state has value "public".
///
- (BOOL)isPublic;

///
/// Retrieves whether the union's current tag state has value "team_only".
///
/// @return Whether the union's current tag state has value "team_only".
///
- (BOOL)isTeamOnly;

///
/// Retrieves whether the union's current tag state has value "password".
///
/// @return Whether the union's current tag state has value "password".
///
- (BOOL)isPassword;

///
/// Retrieves whether the union's current tag state has value
/// "team_and_password".
///
/// @return Whether the union's current tag state has value "team_and_password".
///
- (BOOL)isTeamAndPassword;

///
/// Retrieves whether the union's current tag state has value
/// "shared_folder_only".
///
/// @return Whether the union's current tag state has value
/// "shared_folder_only".
///
- (BOOL)isSharedFolderOnly;

///
/// Retrieves whether the union's current tag state has value "no_one".
///
/// @return Whether the union's current tag state has value "no_one".
///
- (BOOL)isNoOne;

///
/// Retrieves whether the union's current tag state has value "only_you".
///
/// @return Whether the union's current tag state has value "only_you".
///
- (BOOL)isOnlyYou;

///
/// Retrieves whether the union's current tag state has value "other".
///
/// @return Whether the union's current tag state has value "other".
///
- (BOOL)isOther;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString *)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the `DBSHARINGAlphaResolvedVisibility` union.
///
@interface DBSHARINGAlphaResolvedVisibilitySerializer : NSObject

///
/// Serializes `DBSHARINGAlphaResolvedVisibility` instances.
///
/// @param instance An instance of the `DBSHARINGAlphaResolvedVisibility` API
/// object.
///
/// @return A json-compatible dictionary representation of the
/// `DBSHARINGAlphaResolvedVisibility` API object.
///
+ (nullable NSDictionary<NSString *, id> *)serialize:(DBSHARINGAlphaResolvedVisibility *)instance;

///
/// Deserializes `DBSHARINGAlphaResolvedVisibility` instances.
///
/// @param dict A json-compatible dictionary representation of the
/// `DBSHARINGAlphaResolvedVisibility` API object.
///
/// @return An instantiation of the `DBSHARINGAlphaResolvedVisibility` object.
///
+ (DBSHARINGAlphaResolvedVisibility *)deserialize:(NSDictionary<NSString *, id> *)dict;

@end

NS_ASSUME_NONNULL_END
